\__ProgramNode [<program>]
	\__FuncDeclarationNode: function tan : Number => <body> [<statement>]
		Params
		('x', 'Number')
		Body
		\__DivNode [<expression>]
			\__SinNode   [<expression>]
				\__IdentifierNode: x : None
			\__CosNode   [<expression>]
				\__IdentifierNode: x : None
	\__FuncDeclarationNode: function cot : None => <body> [<statement>]
		Params
		('x', None)
		Body
		\__DivNode [<expression>]
			\__NumberNode: 1
			\__CallNode tan   [<expression>]
				\_ Arguments
					\__IdentifierNode: x : None
	\__FuncDeclarationNode: function operate : None => <body> [<statement>]
		Params
		('x', None)
		('y', None)
		Body
		\__BlockNode [<expression>]
			\__PrintNode [<expression>]
				\__PlusNode [<expression>]
					\__IdentifierNode: x : None
					\__IdentifierNode: y : None
			\__PrintNode [<expression>]
				\__MinusNode [<expression>]
					\__IdentifierNode: x : None
					\__IdentifierNode: y : None
			\__PrintNode [<expression>]
				\__StarNode [<expression>]
					\__IdentifierNode: x : None
					\__IdentifierNode: y : None
			\__PrintNode [<expression>]
				\__DivNode [<expression>]
					\__IdentifierNode: x : None
					\__IdentifierNode: y : None
	\__FuncDeclarationNode: function fib : None => <body> [<statement>]
		Params
		('n', None)
		Body
		\__IfNode  [<expression>]
			\_ Condition
				\__OrNode [<expression>]
					\__EQNode [<expression>]
						\__IdentifierNode: n : None
						\__NumberNode: 0
					\__EQNode [<expression>]
						\__IdentifierNode: n : None
						\__NumberNode: 1
			\_ Body
				\__NumberNode: 1
			\_ Else Body
				\__PlusNode [<expression>]
					\__CallNode fib   [<expression>]
						\_ Arguments
							\__MinusNode [<expression>]
								\__IdentifierNode: n : None
								\__NumberNode: 1
					\__CallNode fib   [<expression>]
						\_ Arguments
							\__MinusNode [<expression>]
								\__IdentifierNode: n : None
								\__NumberNode: 2
	\__FuncDeclarationNode: function fact : None => <body> [<statement>]
		Params
		('x', None)
		Body
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: f : None
				\__NumberNode: 1
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: i : None
					\__NumberNode: 1
				\__BlockNode [<expression>]
					\__AssignNode:
						\__IdentifierNode: i : None
						\__MinusNode [<expression>]
							\__IdentifierNode: i : None
							\__NumberNode: 1
					\__WhileNode [<expression>]
						\_ Condition
							\__LTNode [<expression>]
								\DestructNode   [<expression>]
									\__IdentifierNode: i : None
									\__PlusNode [<expression>]
										\__IdentifierNode: i : None
										\__NumberNode: 1
								\__PlusNode [<expression>]
									\__IdentifierNode: x : None
									\__NumberNode: 1
						\_ Body
							\__BlockNode [<expression>]
								\DestructNode   [<expression>]
									\__IdentifierNode: f : None
									\__StarNode [<expression>]
										\__IdentifierNode: f : None
										\__IdentifierNode: i : None
	\__FuncDeclarationNode: function gcd : None => <body> [<statement>]
		Params
		('a', None)
		('b', None)
		Body
		\__WhileNode [<expression>]
			\_ Condition
				\__GTNode [<expression>]
					\__IdentifierNode: a : None
					\__NumberNode: 0
			\_ Body
				\__LetNode [<expression>]
					\__AssignNode:
						\__IdentifierNode: m : None
						\__ModNode [<expression>]
							\__IdentifierNode: a : None
							\__IdentifierNode: b : None
					\__BlockNode [<expression>]
						\DestructNode   [<expression>]
							\__IdentifierNode: b : None
							\__IdentifierNode: a : None
						\DestructNode   [<expression>]
							\__IdentifierNode: a : None
							\__IdentifierNode: m : None
	\__ProtocolNode protocol Hashable : None  [<statement>]
		\__Body
			\__MethodProtocolNode hash : Number  [<statement>]

	\__ProtocolNode protocol Equatable : Hashable  [<statement>]
		\__Body
			\__MethodProtocolNode equals : Boolean  [<statement>]
				Arguments
					('other', 'Object')
	\__ProtocolNode protocol Iterable : None  [<statement>]
		\__Body
			\__MethodProtocolNode next : Boolean  [<statement>]

			\__MethodProtocolNode current : Object  [<statement>]

	\__TypeNode: type Range inherits None [<statement>]
					Param 0 ('min', 'Number')
			Param 1 ('max', 'Number')
		\__TypeBodyNode
			Atributes
				\__AttributeNode id = <expr>
					\__IdentifierNode: min : None
					\__IdentifierNode: min : None
				\__AttributeNode id = <expr>
					\__IdentifierNode: max : None
					\__IdentifierNode: max : None
				\__AttributeNode id = <expr>
					\__IdentifierNode: current : None
					\__MinusNode [<expression>]
						\__IdentifierNode: min : None
						\__NumberNode: 1
			Methods
				\__MethodNode: function next : Boolean => <body>
					Params

					\__LTNode [<expression>]
						\DestructNode   [<expression>]
							\__IdentifierNode: self : None
								\__IdentifierNode: current : None
							\__PlusNode [<expression>]
								\__IdentifierNode: self : None
									\__IdentifierNode: current : None
								\__NumberNode: 1
						\__IdentifierNode: self : None
							\__IdentifierNode: max : None
				\__MethodNode: function current : Number => <body>
					Params

					\__IdentifierNode: self : None
						\__IdentifierNode: current : None
	\__TypeNode: type Point inherits None [<statement>]
					Param 0 ('x', None)
			Param 1 ('y', None)
		\__TypeBodyNode
			Atributes
				\__AttributeNode id = <expr>
					\__IdentifierNode: x : None
					\__IdentifierNode: x : None
				\__AttributeNode id = <expr>
					\__IdentifierNode: y : None
					\__IdentifierNode: y : None
			Methods
				\__MethodNode: function getX : None => <body>
					Params

					\__IdentifierNode: self : None
						\__IdentifierNode: x : None
				\__MethodNode: function getY : None => <body>
					Params

					\__IdentifierNode: self : None
						\__IdentifierNode: y : None
				\__MethodNode: function setX : None => <body>
					Params
						('x', None)
					\DestructNode   [<expression>]
						\__IdentifierNode: self : None
							\__IdentifierNode: x : None
						\__IdentifierNode: x : None
				\__MethodNode: function setY : None => <body>
					Params
						('y', None)
					\DestructNode   [<expression>]
						\__IdentifierNode: self : None
							\__IdentifierNode: y : None
						\__IdentifierNode: y : None
	\__TypeNode: type PolarPoint inherits Point [<statement>]
					Param 0 ('phi', None)
			Param 1 ('rho', None)
					Params BaseType 0 <nodes_types.hulk_types.StarNode object at 0x0000023605722CC0>
			Params BaseType 1 <nodes_types.hulk_types.StarNode object at 0x0000023605722D50>
		\__TypeBodyNode
			Atributes

			Methods
				\__MethodNode: function rho : None => <body>
					Params

					\__SqrtNode   [<expression>]
						\__PlusNode [<expression>]
							\__PowNode [<expression>]
								\__IdentifierNode: self : None
									\__CallNode getX   [<expression>]
								\__NumberNode: 2
							\__PowNode [<expression>]
								\__IdentifierNode: self : None
									\__CallNode getY   [<expression>]
								\__NumberNode: 2
	\__TypeNode: type Knight inherits Person [<statement>]
		\__TypeBodyNode
			Atributes

			Methods
				\__MethodNode: function name : None => <body>
					Params

					\__ConcatSpaceNode [<expression>]
						\__StringNode: "Sir"
						\__CallNode base   [<expression>]
	\__TypeNode: type Person inherits None [<statement>]
					Param 0 ('firstname', None)
			Param 1 ('lastname', None)
		\__TypeBodyNode
			Atributes
				\__AttributeNode id = <expr>
					\__IdentifierNode: firstname : None
					\__IdentifierNode: firstname : None
				\__AttributeNode id = <expr>
					\__IdentifierNode: lastname : None
					\__IdentifierNode: lastname : None
			Methods
				\__MethodNode: function name : None => <body>
					Params

					\__ConcatSpaceNode [<expression>]
						\__IdentifierNode: self : None
							\__IdentifierNode: firstname : None
						\__IdentifierNode: self : None
							\__IdentifierNode: lastname : None
				\__MethodNode: function hash : Number => <body>
					Params

					\__BlockNode [<expression>]
						\__NumberNode: 5
	\__TypeNode: type Superman inherits None [<statement>]
		\__TypeBodyNode
			Atributes

			Methods

	\__TypeNode: type Bird inherits None [<statement>]
		\__TypeBodyNode
			Atributes

			Methods

	\__TypeNode: type Plane inherits None [<statement>]
		\__TypeBodyNode
			Atributes

			Methods

	\__TypeNode: type A inherits None [<statement>]
		\__TypeBodyNode
			Atributes

			Methods
				\__MethodNode: function hello : None => <body>
					Params

					\__PrintNode [<expression>]
						\__StringNode: "A"
	\__TypeNode: type B inherits A [<statement>]
		\__TypeBodyNode
			Atributes

			Methods
				\__MethodNode: function hello : None => <body>
					Params

					\__PrintNode [<expression>]
						\__StringNode: "B"
	\__TypeNode: type C inherits A [<statement>]
		\__TypeBodyNode
			Atributes

			Methods
				\__MethodNode: function hello : None => <body>
					Params

					\__PrintNode [<expression>]
						\__StringNode: "C"
	\__BlockNode [<expression>]
		\__NumberNode: 42
		\__PrintNode [<expression>]
			\__NumberNode: 42
		\__PrintNode [<expression>]
			\__DivNode [<expression>]
				\__StarNode [<expression>]
					\__PowNode [<expression>]
						\__PlusNode [<expression>]
							\__NumberNode: 1
							\__NumberNode: 2
						\__NumberNode: 3
					\__NumberNode: 4
				\__NumberNode: 5
		\__PrintNode [<expression>]
			\__StringNode: "Hello World"
		\__PrintNode [<expression>]
			\__StringNode: "The message is \"Hello World\""
		\__PrintNode [<expression>]
			\__ConcatNode [<expression>]
				\__StringNode: "The meaning of life is "
				\__NumberNode: 42
		\__PrintNode [<expression>]
			\__PlusNode [<expression>]
				\__PowNode [<expression>]
					\__SinNode   [<expression>]
						\__StarNode [<expression>]
							\__NumberNode: 2
							\__NumberNode: PI
					\__NumberNode: 2
				\__CosNode   [<expression>]
					\__DivNode [<expression>]
						\__StarNode [<expression>]
							\__NumberNode: 3
							\__NumberNode: PI
						\__LogNode [<expression>]
							\__NumberNode: 4
							\__NumberNode: 64
		\__BlockNode [<expression>]
			\__PrintNode [<expression>]
				\__NumberNode: 42
			\__PrintNode [<expression>]
				\__SinNode   [<expression>]
					\__DivNode [<expression>]
						\__NumberNode: PI
						\__NumberNode: 2
			\__PrintNode [<expression>]
				\__StringNode: "Hello World"
		\__PrintNode [<expression>]
			\__PlusNode [<expression>]
				\__PowNode [<expression>]
					\__CallNode tan   [<expression>]
						\_ Arguments
							\__NumberNode: PI
					\__NumberNode: 2
				\__PowNode [<expression>]
					\__CallNode cot   [<expression>]
						\_ Arguments
							\__NumberNode: PI
					\__NumberNode: 2
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: msg : None
				\__StringNode: "Hello World"
			\__PrintNode [<expression>]
				\__IdentifierNode: msg : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: number : None
				\__NumberNode: 42
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: text : None
					\__StringNode: "The meaning of life is"
				\__PrintNode [<expression>]
					\__ConcatNode [<expression>]
						\__IdentifierNode: text : None
						\__IdentifierNode: number : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: number : None
				\__NumberNode: 42
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: text : None
					\__StringNode: "The meaning of life is"
				\__PrintNode [<expression>]
					\__ConcatNode [<expression>]
						\__IdentifierNode: text : None
						\__IdentifierNode: number : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: number : None
				\__NumberNode: 42
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: text : None
					\__StringNode: "The meaning of life is"
				\__PrintNode [<expression>]
					\__ConcatNode [<expression>]
						\__IdentifierNode: text : None
						\__IdentifierNode: number : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 6
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: b : None
					\__StarNode [<expression>]
						\__IdentifierNode: a : None
						\__NumberNode: 7
				\__PrintNode [<expression>]
					\__IdentifierNode: b : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 6
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: b : None
					\__StarNode [<expression>]
						\__IdentifierNode: a : None
						\__NumberNode: 7
				\__PrintNode [<expression>]
					\__IdentifierNode: b : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 5
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: b : None
					\__NumberNode: 10
				\__LetNode [<expression>]
					\__AssignNode:
						\__IdentifierNode: c : None
						\__NumberNode: 20
					\__BlockNode [<expression>]
						\__PrintNode [<expression>]
							\__PlusNode [<expression>]
								\__IdentifierNode: a : None
								\__IdentifierNode: b : None
						\__PrintNode [<expression>]
							\__StarNode [<expression>]
								\__IdentifierNode: b : None
								\__IdentifierNode: c : None
						\__PrintNode [<expression>]
							\__DivNode [<expression>]
								\__IdentifierNode: c : None
								\__IdentifierNode: a : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__LetNode [<expression>]
					\__AssignNode:
						\__IdentifierNode: b : None
						\__NumberNode: 6
					\__StarNode [<expression>]
						\__IdentifierNode: b : None
						\__NumberNode: 7
			\__PrintNode [<expression>]
				\__IdentifierNode: a : None
		\__PrintNode [<expression>]
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: b : None
					\__NumberNode: 6
				\__StarNode [<expression>]
					\__IdentifierNode: b : None
					\__NumberNode: 7
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 20
			\__BlockNode [<expression>]
				\__LetNode [<expression>]
					\__AssignNode:
						\__IdentifierNode: a : None
						\__NumberNode: 42
					\__PrintNode [<expression>]
						\__IdentifierNode: a : None
				\__PrintNode [<expression>]
					\__IdentifierNode: a : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 7
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: a : None
					\__StarNode [<expression>]
						\__NumberNode: 7
						\__NumberNode: 6
				\__PrintNode [<expression>]
					\__IdentifierNode: a : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 7
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: a : None
					\__StarNode [<expression>]
						\__NumberNode: 7
						\__NumberNode: 6
				\__PrintNode [<expression>]
					\__IdentifierNode: a : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 0
			\__BlockNode [<expression>]
				\__PrintNode [<expression>]
					\__IdentifierNode: a : None
				\DestructNode   [<expression>]
					\__IdentifierNode: a : None
					\__NumberNode: 1
				\__PrintNode [<expression>]
					\__IdentifierNode: a : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 0
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: b : None
					\DestructNode   [<expression>]
						\__IdentifierNode: a : None
						\__NumberNode: 1
				\__BlockNode [<expression>]
					\__PrintNode [<expression>]
						\__IdentifierNode: a : None
					\__PrintNode [<expression>]
						\__IdentifierNode: b : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 42
			\__IfNode  [<expression>]
				\_ Condition
					\__EQNode [<expression>]
						\__ModNode [<expression>]
							\__IdentifierNode: a : None
							\__NumberNode: 2
						\__NumberNode: 0
				\_ Body
					\__PrintNode [<expression>]
						\__StringNode: "Even"
				\_ Else Body
					\__PrintNode [<expression>]
						\__StringNode: "odd"
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 42
			\__PrintNode [<expression>]
				\__IfNode  [<expression>]
					\_ Condition
						\__EQNode [<expression>]
							\__ModNode [<expression>]
								\__IdentifierNode: a : None
								\__NumberNode: 2
							\__NumberNode: 0
					\_ Body
						\__StringNode: "even"
					\_ Else Body
						\__StringNode: "odd"
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 42
			\__IfNode  [<expression>]
				\_ Condition
					\__EQNode [<expression>]
						\__ModNode [<expression>]
							\__IdentifierNode: a : None
							\__NumberNode: 2
						\__NumberNode: 0
				\_ Body
					\__BlockNode [<expression>]
						\__PrintNode [<expression>]
							\__IdentifierNode: a : None
						\__PrintNode [<expression>]
							\__StringNode: "Even"
				\_ Else Body
					\__PrintNode [<expression>]
						\__StringNode: "Odd"
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 42
			\__LetNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: mod : None
					\__ModNode [<expression>]
						\__IdentifierNode: a : None
						\__NumberNode: 3
				\__PrintNode [<expression>]
					\__IfNode  [<expression>]
						\_ Condition
							\__EQNode [<expression>]
								\__IdentifierNode: mod : None
								\__NumberNode: 0
						\_ Body
							\__StringNode: "Magic"
						\_ Elif Condition 0
							\__EQNode [<expression>]
								\__ModNode [<expression>]
									\__IdentifierNode: mod : None
									\__NumberNode: 3
								\__NumberNode: 1
						\_ Elif Body 0
							\__StringNode: "Woke"
						\_ Else Body
							\__StringNode: "Dumb"
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: a : None
				\__NumberNode: 10
			\__WhileNode [<expression>]
				\_ Condition
					\__GENode [<expression>]
						\__IdentifierNode: a : None
						\__NumberNode: 0
				\_ Body
					\__BlockNode [<expression>]
						\__PrintNode [<expression>]
							\__IdentifierNode: a : None
						\DestructNode   [<expression>]
							\__IdentifierNode: a : None
							\__MinusNode [<expression>]
								\__IdentifierNode: a : None
								\__NumberNode: 1
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: x : None
				\__NumberNode: 0
			\__BlockNode [<expression>]
				\__AssignNode:
					\__IdentifierNode: x : None
					\__MinusNode [<expression>]
						\__IdentifierNode: x : None
						\__NumberNode: 1
				\__WhileNode [<expression>]
					\_ Condition
						\__LTNode [<expression>]
							\DestructNode   [<expression>]
								\__IdentifierNode: x : None
								\__PlusNode [<expression>]
									\__IdentifierNode: x : None
									\__NumberNode: 1
							\__NumberNode: 10
					\_ Body
						\__BlockNode [<expression>]
							\__PrintNode [<expression>]
								\__IdentifierNode: x : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: iterable : None
				\__CallNode range   [<expression>]
					\_ Arguments
						\__NumberNode: 0
						\__NumberNode: 10
			\__WhileNode [<expression>]
				\_ Condition
					\__IdentifierNode: iterable : None
						\__CallNode next   [<expression>]
				\_ Body
					\__LetNode [<expression>]
						\__AssignNode:
							\__IdentifierNode: x : None
							\__IdentifierNode: iterable : None
								\__CallNode current   [<expression>]
						\__PrintNode [<expression>]
							\__IdentifierNode: x : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: pt : None
				\_ObjectCreationNode: new Point  [<expression>]
			\__PrintNode [<expression>]
				\__ConcatNode [<expression>]
					\__ConcatNode [<expression>]
						\__ConcatNode [<expression>]
							\__StringNode: "x: "
							\__IdentifierNode: pt : None
								\__CallNode getX   [<expression>]
						\__StringNode: "; y: "
					\__IdentifierNode: pt : None
						\__CallNode getY   [<expression>]
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: pt : None
				\_ObjectCreationNode: new Point  [<expression>]
					\__NumberNode: 3
					\__NumberNode: 4
			\__PrintNode [<expression>]
				\__ConcatNode [<expression>]
					\__ConcatNode [<expression>]
						\__ConcatNode [<expression>]
							\__StringNode: "x: "
							\__IdentifierNode: pt : None
								\__CallNode getX   [<expression>]
						\__StringNode: "; y: "
					\__IdentifierNode: pt : None
						\__CallNode getY   [<expression>]
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: pt : None
				\_ObjectCreationNode: new PolarPoint  [<expression>]
					\__NumberNode: 3
					\__NumberNode: 4
			\__PrintNode [<expression>]
				\__ConcatNode [<expression>]
					\__StringNode: "rho: "
					\__IdentifierNode: pt : None
						\__CallNode rho   [<expression>]
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: p : None
				\_ObjectCreationNode: new Knight  [<expression>]
					\__StringNode: "Phil"
					\__StringNode: "Collins"
			\__PrintNode [<expression>]
				\__IdentifierNode: p : None
					\__CallNode name   [<expression>]
		\__LetNode [<expression>]
			\__AssignNode : Person
				\__IdentifierNode: p : None
				\_ObjectCreationNode: new Knight  [<expression>]
					\__StringNode: "Phil"
					\__StringNode: "Collins"
			\__PrintNode [<expression>]
				\__IdentifierNode: p : None
					\__CallNode name   [<expression>]
		\__LetNode [<expression>]
			\__AssignNode : Number
				\__IdentifierNode: x : None
				\__NumberNode: 42
			\__PrintNode [<expression>]
				\__IdentifierNode: x : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: x : None
				\_ObjectCreationNode: new Superman  [<expression>]
			\__PrintNode [<expression>]
				\__IfNode  [<expression>]
					\_ Condition
						\__IsNode [<expression>]
							\__IdentifierNode: x : None
							\__ Type: Bird
					\_ Body
						\__StringNode: "It's bird!"
					\_ Elif Condition 0
						\__IsNode [<expression>]
							\__IdentifierNode: x : None
							\__ Type: Plane
					\_ Elif Body 0
						\__StringNode: "It's a plane!"
					\_ Else Body
						\__StringNode: "No, it's Superman!"
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: x : None
				\__NumberNode: 42
			\__PrintNode [<expression>]
				\__IdentifierNode: x : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: total : None
				\__PlusNode [<expression>]
					\__NumberNode: 4
					\__NumberNode: 6
			\__PrintNode [<expression>]
				\__IdentifierNode: total : None
		\__LetNode [<expression>]
			\__AssignNode : A
				\__IdentifierNode: x : None
				\__IfNode  [<expression>]
					\_ Condition
						\__LTNode [<expression>]
							\__RandNode ()
							\__NumberNode: 0.5
					\_ Body
						\_ObjectCreationNode: new B  [<expression>]
					\_ Else Body
						\_ObjectCreationNode: new C  [<expression>]
			\__IfNode  [<expression>]
				\_ Condition
					\__IsNode [<expression>]
						\__IdentifierNode: x : None
						\__ Type: B
				\_ Body
					\__LetNode [<expression>]
						\__AssignNode : B
							\__IdentifierNode: y : None
							\__AsNode [<expression>]
								\__IdentifierNode: x : None
								\__ Type: B
						\__BlockNode [<expression>]
							\__IdentifierNode: y : None
								\__CallNode hello   [<expression>]
				\_ Else Body
					\__BlockNode [<expression>]
						\__PrintNode [<expression>]
							\__StringNode: "x cannot be downcasted to B"
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: numbers : None
				\__VectorNode  [<expression>]
					\_Items
						\__NumberNode: 1
						\__NumberNode: 2
						\__NumberNode: 3
						\__NumberNode: 4
						\__NumberNode: 5
						\__NumberNode: 6
						\__NumberNode: 7
						\__NumberNode: 8
						\__NumberNode: 9
			\__WhileNode [<expression>]
				\_ Condition
					\__IdentifierNode: numbers : None
						\__CallNode next   [<expression>]
				\_ Body
					\__LetNode [<expression>]
						\__AssignNode:
							\__IdentifierNode: x : None
							\__IdentifierNode: numbers : None
								\__CallNode current   [<expression>]
						\__PrintNode [<expression>]
							\__IdentifierNode: x : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: numbers : None
				\__VectorNode  [<expression>]
					\_Items
						\__NumberNode: 1
						\__NumberNode: 2
						\__NumberNode: 3
						\__NumberNode: 4
						\__NumberNode: 5
						\__NumberNode: 6
						\__NumberNode: 7
						\__NumberNode: 8
						\__NumberNode: 9
			\__PrintNode [<expression>]
				\__VectorIndex [<expression>]
					\__ numbers
					\__NumberNode: 7
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: squares : None
				\__VectorImplicitNode  [<expression>]
					\__Expression 
						\__PowNode [<expression>]
							\__IdentifierNode: x : None
							\__NumberNode: 2
					\__Variable : {node.id}
					\Range Low : {node.rangeLow}
					\Range Up : {node.rangeUp}
			\__PrintNode [<expression>]
				\__IdentifierNode: x : None
		\__LetNode [<expression>]
			\__AssignNode:
				\__IdentifierNode: squares : None
				\__VectorImplicitNode  [<expression>]
					\__Expression 
						\__PowNode [<expression>]
							\__IdentifierNode: x : None
							\__NumberNode: 2
					\__Variable : {node.id}
					\Range Low : {node.rangeLow}
					\Range Up : {node.rangeUp}
			\__WhileNode [<expression>]
				\_ Condition
					\__IdentifierNode: squares : None
						\__CallNode next   [<expression>]
				\_ Body
					\__LetNode [<expression>]
						\__AssignNode:
							\__IdentifierNode: x : None
							\__IdentifierNode: squares : None
								\__CallNode current   [<expression>]
						\__PrintNode [<expression>]
							\__IdentifierNode: x : None
		\__LetNode [<expression>]
			\__AssignNode : Hashable
				\__IdentifierNode: x : None
				\_ObjectCreationNode: new Person  [<expression>]
			\__PrintNode [<expression>]
				\__IdentifierNode: x : None
					\__CallNode hash   [<expression>]
		\__LetNode [<expression>]
			\__AssignNode : Hashable
				\__IdentifierNode: x : None
				\_ObjectCreationNode: new Point  [<expression>]
					\__NumberNode: 0
					\__NumberNode: 0
			\__PrintNode [<expression>]
				\__IdentifierNode: x : None
					\__CallNode hash   [<expression>]