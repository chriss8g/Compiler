Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expressionL
Rule 2     expression -> expressionA
Rule 3     expressionL -> expressionL OR termL
Rule 4     expressionL -> termL
Rule 5     termL -> termL AND factorL
Rule 6     termL -> factorL
Rule 7     factorL -> BOOL
Rule 8     factorL -> factorA EQ factorA
Rule 9     factorL -> factorA GT factorA
Rule 10    factorL -> factorA LT factorA
Rule 11    factorL -> factorA GE factorA
Rule 12    factorL -> factorA LE factorA
Rule 13    factorL -> factorA NE factorA
Rule 14    factorL -> LPAREN expressionL RPAREN
Rule 15    expressionA -> expressionA PLUS termA
Rule 16    expressionA -> expressionA MINUS termA
Rule 17    expressionA -> termA
Rule 18    termA -> termA TIMES factorA
Rule 19    termA -> termA DIVIDE factorA
Rule 20    termA -> factorA
Rule 21    factorA -> NUMBER
Rule 22    factorA -> PI
Rule 23    factorA -> E
Rule 24    factorA -> LPAREN expressionA RPAREN

Terminals, with rules where they appear

AND                  : 5
BOOL                 : 7
DIVIDE               : 19
E                    : 23
EQ                   : 8
GE                   : 11
GT                   : 9
LE                   : 12
LPAREN               : 14 24
LT                   : 10
MINUS                : 16
NE                   : 13
NUMBER               : 21
OR                   : 3
PI                   : 22
PLUS                 : 15
RPAREN               : 14 24
TIMES                : 18
error                : 

Nonterminals, with rules where they appear

expression           : 0
expressionA          : 2 15 16 24
expressionL          : 1 3 14
factorA              : 8 8 9 9 10 10 11 11 12 12 13 13 18 19 20
factorL              : 5 6
termA                : 15 16 17 18 19
termL                : 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expressionL
    (2) expression -> . expressionA
    (3) expressionL -> . expressionL OR termL
    (4) expressionL -> . termL
    (15) expressionA -> . expressionA PLUS termA
    (16) expressionA -> . expressionA MINUS termA
    (17) expressionA -> . termA
    (5) termL -> . termL AND factorL
    (6) termL -> . factorL
    (18) termA -> . termA TIMES factorA
    (19) termA -> . termA DIVIDE factorA
    (20) termA -> . factorA
    (7) factorL -> . BOOL
    (8) factorL -> . factorA EQ factorA
    (9) factorL -> . factorA GT factorA
    (10) factorL -> . factorA LT factorA
    (11) factorL -> . factorA GE factorA
    (12) factorL -> . factorA LE factorA
    (13) factorL -> . factorA NE factorA
    (14) factorL -> . LPAREN expressionL RPAREN
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    BOOL            shift and go to state 8
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12

    expression                     shift and go to state 1
    expressionL                    shift and go to state 2
    expressionA                    shift and go to state 3
    termL                          shift and go to state 4
    termA                          shift and go to state 5
    factorL                        shift and go to state 6
    factorA                        shift and go to state 7

state 1

    (0) S' -> expression .



state 2

    (1) expression -> expressionL .
    (3) expressionL -> expressionL . OR termL

    $end            reduce using rule 1 (expression -> expressionL .)
    OR              shift and go to state 13


state 3

    (2) expression -> expressionA .
    (15) expressionA -> expressionA . PLUS termA
    (16) expressionA -> expressionA . MINUS termA

    $end            reduce using rule 2 (expression -> expressionA .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 4

    (4) expressionL -> termL .
    (5) termL -> termL . AND factorL

    OR              reduce using rule 4 (expressionL -> termL .)
    $end            reduce using rule 4 (expressionL -> termL .)
    RPAREN          reduce using rule 4 (expressionL -> termL .)
    AND             shift and go to state 16


state 5

    (17) expressionA -> termA .
    (18) termA -> termA . TIMES factorA
    (19) termA -> termA . DIVIDE factorA

    PLUS            reduce using rule 17 (expressionA -> termA .)
    MINUS           reduce using rule 17 (expressionA -> termA .)
    $end            reduce using rule 17 (expressionA -> termA .)
    RPAREN          reduce using rule 17 (expressionA -> termA .)
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 6

    (6) termL -> factorL .

    AND             reduce using rule 6 (termL -> factorL .)
    OR              reduce using rule 6 (termL -> factorL .)
    $end            reduce using rule 6 (termL -> factorL .)
    RPAREN          reduce using rule 6 (termL -> factorL .)


state 7

    (20) termA -> factorA .
    (8) factorL -> factorA . EQ factorA
    (9) factorL -> factorA . GT factorA
    (10) factorL -> factorA . LT factorA
    (11) factorL -> factorA . GE factorA
    (12) factorL -> factorA . LE factorA
    (13) factorL -> factorA . NE factorA

    TIMES           reduce using rule 20 (termA -> factorA .)
    DIVIDE          reduce using rule 20 (termA -> factorA .)
    PLUS            reduce using rule 20 (termA -> factorA .)
    MINUS           reduce using rule 20 (termA -> factorA .)
    $end            reduce using rule 20 (termA -> factorA .)
    RPAREN          reduce using rule 20 (termA -> factorA .)
    EQ              shift and go to state 19
    GT              shift and go to state 20
    LT              shift and go to state 21
    GE              shift and go to state 22
    LE              shift and go to state 23
    NE              shift and go to state 24


state 8

    (7) factorL -> BOOL .

    AND             reduce using rule 7 (factorL -> BOOL .)
    OR              reduce using rule 7 (factorL -> BOOL .)
    $end            reduce using rule 7 (factorL -> BOOL .)
    RPAREN          reduce using rule 7 (factorL -> BOOL .)


state 9

    (14) factorL -> LPAREN . expressionL RPAREN
    (24) factorA -> LPAREN . expressionA RPAREN
    (3) expressionL -> . expressionL OR termL
    (4) expressionL -> . termL
    (15) expressionA -> . expressionA PLUS termA
    (16) expressionA -> . expressionA MINUS termA
    (17) expressionA -> . termA
    (5) termL -> . termL AND factorL
    (6) termL -> . factorL
    (18) termA -> . termA TIMES factorA
    (19) termA -> . termA DIVIDE factorA
    (20) termA -> . factorA
    (7) factorL -> . BOOL
    (8) factorL -> . factorA EQ factorA
    (9) factorL -> . factorA GT factorA
    (10) factorL -> . factorA LT factorA
    (11) factorL -> . factorA GE factorA
    (12) factorL -> . factorA LE factorA
    (13) factorL -> . factorA NE factorA
    (14) factorL -> . LPAREN expressionL RPAREN
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    BOOL            shift and go to state 8
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12

    expressionL                    shift and go to state 25
    expressionA                    shift and go to state 26
    termL                          shift and go to state 4
    termA                          shift and go to state 5
    factorL                        shift and go to state 6
    factorA                        shift and go to state 7

state 10

    (21) factorA -> NUMBER .

    EQ              reduce using rule 21 (factorA -> NUMBER .)
    GT              reduce using rule 21 (factorA -> NUMBER .)
    LT              reduce using rule 21 (factorA -> NUMBER .)
    GE              reduce using rule 21 (factorA -> NUMBER .)
    LE              reduce using rule 21 (factorA -> NUMBER .)
    NE              reduce using rule 21 (factorA -> NUMBER .)
    TIMES           reduce using rule 21 (factorA -> NUMBER .)
    DIVIDE          reduce using rule 21 (factorA -> NUMBER .)
    PLUS            reduce using rule 21 (factorA -> NUMBER .)
    MINUS           reduce using rule 21 (factorA -> NUMBER .)
    $end            reduce using rule 21 (factorA -> NUMBER .)
    RPAREN          reduce using rule 21 (factorA -> NUMBER .)
    AND             reduce using rule 21 (factorA -> NUMBER .)
    OR              reduce using rule 21 (factorA -> NUMBER .)


state 11

    (22) factorA -> PI .

    EQ              reduce using rule 22 (factorA -> PI .)
    GT              reduce using rule 22 (factorA -> PI .)
    LT              reduce using rule 22 (factorA -> PI .)
    GE              reduce using rule 22 (factorA -> PI .)
    LE              reduce using rule 22 (factorA -> PI .)
    NE              reduce using rule 22 (factorA -> PI .)
    TIMES           reduce using rule 22 (factorA -> PI .)
    DIVIDE          reduce using rule 22 (factorA -> PI .)
    PLUS            reduce using rule 22 (factorA -> PI .)
    MINUS           reduce using rule 22 (factorA -> PI .)
    $end            reduce using rule 22 (factorA -> PI .)
    RPAREN          reduce using rule 22 (factorA -> PI .)
    AND             reduce using rule 22 (factorA -> PI .)
    OR              reduce using rule 22 (factorA -> PI .)


state 12

    (23) factorA -> E .

    EQ              reduce using rule 23 (factorA -> E .)
    GT              reduce using rule 23 (factorA -> E .)
    LT              reduce using rule 23 (factorA -> E .)
    GE              reduce using rule 23 (factorA -> E .)
    LE              reduce using rule 23 (factorA -> E .)
    NE              reduce using rule 23 (factorA -> E .)
    TIMES           reduce using rule 23 (factorA -> E .)
    DIVIDE          reduce using rule 23 (factorA -> E .)
    PLUS            reduce using rule 23 (factorA -> E .)
    MINUS           reduce using rule 23 (factorA -> E .)
    $end            reduce using rule 23 (factorA -> E .)
    RPAREN          reduce using rule 23 (factorA -> E .)
    AND             reduce using rule 23 (factorA -> E .)
    OR              reduce using rule 23 (factorA -> E .)


state 13

    (3) expressionL -> expressionL OR . termL
    (5) termL -> . termL AND factorL
    (6) termL -> . factorL
    (7) factorL -> . BOOL
    (8) factorL -> . factorA EQ factorA
    (9) factorL -> . factorA GT factorA
    (10) factorL -> . factorA LT factorA
    (11) factorL -> . factorA GE factorA
    (12) factorL -> . factorA LE factorA
    (13) factorL -> . factorA NE factorA
    (14) factorL -> . LPAREN expressionL RPAREN
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    BOOL            shift and go to state 8
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12

    termL                          shift and go to state 27
    factorL                        shift and go to state 6
    factorA                        shift and go to state 28

state 14

    (15) expressionA -> expressionA PLUS . termA
    (18) termA -> . termA TIMES factorA
    (19) termA -> . termA DIVIDE factorA
    (20) termA -> . factorA
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12
    LPAREN          shift and go to state 31

    termA                          shift and go to state 29
    factorA                        shift and go to state 30

state 15

    (16) expressionA -> expressionA MINUS . termA
    (18) termA -> . termA TIMES factorA
    (19) termA -> . termA DIVIDE factorA
    (20) termA -> . factorA
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12
    LPAREN          shift and go to state 31

    termA                          shift and go to state 32
    factorA                        shift and go to state 30

state 16

    (5) termL -> termL AND . factorL
    (7) factorL -> . BOOL
    (8) factorL -> . factorA EQ factorA
    (9) factorL -> . factorA GT factorA
    (10) factorL -> . factorA LT factorA
    (11) factorL -> . factorA GE factorA
    (12) factorL -> . factorA LE factorA
    (13) factorL -> . factorA NE factorA
    (14) factorL -> . LPAREN expressionL RPAREN
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    BOOL            shift and go to state 8
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12

    factorL                        shift and go to state 33
    factorA                        shift and go to state 28

state 17

    (18) termA -> termA TIMES . factorA
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12
    LPAREN          shift and go to state 31

    factorA                        shift and go to state 34

state 18

    (19) termA -> termA DIVIDE . factorA
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12
    LPAREN          shift and go to state 31

    factorA                        shift and go to state 35

state 19

    (8) factorL -> factorA EQ . factorA
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12
    LPAREN          shift and go to state 31

    factorA                        shift and go to state 36

state 20

    (9) factorL -> factorA GT . factorA
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12
    LPAREN          shift and go to state 31

    factorA                        shift and go to state 37

state 21

    (10) factorL -> factorA LT . factorA
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12
    LPAREN          shift and go to state 31

    factorA                        shift and go to state 38

state 22

    (11) factorL -> factorA GE . factorA
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12
    LPAREN          shift and go to state 31

    factorA                        shift and go to state 39

state 23

    (12) factorL -> factorA LE . factorA
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12
    LPAREN          shift and go to state 31

    factorA                        shift and go to state 40

state 24

    (13) factorL -> factorA NE . factorA
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12
    LPAREN          shift and go to state 31

    factorA                        shift and go to state 41

state 25

    (14) factorL -> LPAREN expressionL . RPAREN
    (3) expressionL -> expressionL . OR termL

    RPAREN          shift and go to state 42
    OR              shift and go to state 13


state 26

    (24) factorA -> LPAREN expressionA . RPAREN
    (15) expressionA -> expressionA . PLUS termA
    (16) expressionA -> expressionA . MINUS termA

    RPAREN          shift and go to state 43
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 27

    (3) expressionL -> expressionL OR termL .
    (5) termL -> termL . AND factorL

    OR              reduce using rule 3 (expressionL -> expressionL OR termL .)
    $end            reduce using rule 3 (expressionL -> expressionL OR termL .)
    RPAREN          reduce using rule 3 (expressionL -> expressionL OR termL .)
    AND             shift and go to state 16


state 28

    (8) factorL -> factorA . EQ factorA
    (9) factorL -> factorA . GT factorA
    (10) factorL -> factorA . LT factorA
    (11) factorL -> factorA . GE factorA
    (12) factorL -> factorA . LE factorA
    (13) factorL -> factorA . NE factorA

    EQ              shift and go to state 19
    GT              shift and go to state 20
    LT              shift and go to state 21
    GE              shift and go to state 22
    LE              shift and go to state 23
    NE              shift and go to state 24


state 29

    (15) expressionA -> expressionA PLUS termA .
    (18) termA -> termA . TIMES factorA
    (19) termA -> termA . DIVIDE factorA

    PLUS            reduce using rule 15 (expressionA -> expressionA PLUS termA .)
    MINUS           reduce using rule 15 (expressionA -> expressionA PLUS termA .)
    $end            reduce using rule 15 (expressionA -> expressionA PLUS termA .)
    RPAREN          reduce using rule 15 (expressionA -> expressionA PLUS termA .)
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 30

    (20) termA -> factorA .

    TIMES           reduce using rule 20 (termA -> factorA .)
    DIVIDE          reduce using rule 20 (termA -> factorA .)
    PLUS            reduce using rule 20 (termA -> factorA .)
    MINUS           reduce using rule 20 (termA -> factorA .)
    $end            reduce using rule 20 (termA -> factorA .)
    RPAREN          reduce using rule 20 (termA -> factorA .)


state 31

    (24) factorA -> LPAREN . expressionA RPAREN
    (15) expressionA -> . expressionA PLUS termA
    (16) expressionA -> . expressionA MINUS termA
    (17) expressionA -> . termA
    (18) termA -> . termA TIMES factorA
    (19) termA -> . termA DIVIDE factorA
    (20) termA -> . factorA
    (21) factorA -> . NUMBER
    (22) factorA -> . PI
    (23) factorA -> . E
    (24) factorA -> . LPAREN expressionA RPAREN

    NUMBER          shift and go to state 10
    PI              shift and go to state 11
    E               shift and go to state 12
    LPAREN          shift and go to state 31

    expressionA                    shift and go to state 26
    termA                          shift and go to state 5
    factorA                        shift and go to state 30

state 32

    (16) expressionA -> expressionA MINUS termA .
    (18) termA -> termA . TIMES factorA
    (19) termA -> termA . DIVIDE factorA

    PLUS            reduce using rule 16 (expressionA -> expressionA MINUS termA .)
    MINUS           reduce using rule 16 (expressionA -> expressionA MINUS termA .)
    $end            reduce using rule 16 (expressionA -> expressionA MINUS termA .)
    RPAREN          reduce using rule 16 (expressionA -> expressionA MINUS termA .)
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 33

    (5) termL -> termL AND factorL .

    AND             reduce using rule 5 (termL -> termL AND factorL .)
    OR              reduce using rule 5 (termL -> termL AND factorL .)
    $end            reduce using rule 5 (termL -> termL AND factorL .)
    RPAREN          reduce using rule 5 (termL -> termL AND factorL .)


state 34

    (18) termA -> termA TIMES factorA .

    TIMES           reduce using rule 18 (termA -> termA TIMES factorA .)
    DIVIDE          reduce using rule 18 (termA -> termA TIMES factorA .)
    PLUS            reduce using rule 18 (termA -> termA TIMES factorA .)
    MINUS           reduce using rule 18 (termA -> termA TIMES factorA .)
    $end            reduce using rule 18 (termA -> termA TIMES factorA .)
    RPAREN          reduce using rule 18 (termA -> termA TIMES factorA .)


state 35

    (19) termA -> termA DIVIDE factorA .

    TIMES           reduce using rule 19 (termA -> termA DIVIDE factorA .)
    DIVIDE          reduce using rule 19 (termA -> termA DIVIDE factorA .)
    PLUS            reduce using rule 19 (termA -> termA DIVIDE factorA .)
    MINUS           reduce using rule 19 (termA -> termA DIVIDE factorA .)
    $end            reduce using rule 19 (termA -> termA DIVIDE factorA .)
    RPAREN          reduce using rule 19 (termA -> termA DIVIDE factorA .)


state 36

    (8) factorL -> factorA EQ factorA .

    AND             reduce using rule 8 (factorL -> factorA EQ factorA .)
    OR              reduce using rule 8 (factorL -> factorA EQ factorA .)
    $end            reduce using rule 8 (factorL -> factorA EQ factorA .)
    RPAREN          reduce using rule 8 (factorL -> factorA EQ factorA .)


state 37

    (9) factorL -> factorA GT factorA .

    AND             reduce using rule 9 (factorL -> factorA GT factorA .)
    OR              reduce using rule 9 (factorL -> factorA GT factorA .)
    $end            reduce using rule 9 (factorL -> factorA GT factorA .)
    RPAREN          reduce using rule 9 (factorL -> factorA GT factorA .)


state 38

    (10) factorL -> factorA LT factorA .

    AND             reduce using rule 10 (factorL -> factorA LT factorA .)
    OR              reduce using rule 10 (factorL -> factorA LT factorA .)
    $end            reduce using rule 10 (factorL -> factorA LT factorA .)
    RPAREN          reduce using rule 10 (factorL -> factorA LT factorA .)


state 39

    (11) factorL -> factorA GE factorA .

    AND             reduce using rule 11 (factorL -> factorA GE factorA .)
    OR              reduce using rule 11 (factorL -> factorA GE factorA .)
    $end            reduce using rule 11 (factorL -> factorA GE factorA .)
    RPAREN          reduce using rule 11 (factorL -> factorA GE factorA .)


state 40

    (12) factorL -> factorA LE factorA .

    AND             reduce using rule 12 (factorL -> factorA LE factorA .)
    OR              reduce using rule 12 (factorL -> factorA LE factorA .)
    $end            reduce using rule 12 (factorL -> factorA LE factorA .)
    RPAREN          reduce using rule 12 (factorL -> factorA LE factorA .)


state 41

    (13) factorL -> factorA NE factorA .

    AND             reduce using rule 13 (factorL -> factorA NE factorA .)
    OR              reduce using rule 13 (factorL -> factorA NE factorA .)
    $end            reduce using rule 13 (factorL -> factorA NE factorA .)
    RPAREN          reduce using rule 13 (factorL -> factorA NE factorA .)


state 42

    (14) factorL -> LPAREN expressionL RPAREN .

    AND             reduce using rule 14 (factorL -> LPAREN expressionL RPAREN .)
    OR              reduce using rule 14 (factorL -> LPAREN expressionL RPAREN .)
    $end            reduce using rule 14 (factorL -> LPAREN expressionL RPAREN .)
    RPAREN          reduce using rule 14 (factorL -> LPAREN expressionL RPAREN .)


state 43

    (24) factorA -> LPAREN expressionA RPAREN .

    EQ              reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    GT              reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    LT              reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    GE              reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    LE              reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    NE              reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    TIMES           reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    DIVIDE          reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    PLUS            reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    MINUS           reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    $end            reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    RPAREN          reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    AND             reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)
    OR              reduce using rule 24 (factorA -> LPAREN expressionA RPAREN .)

